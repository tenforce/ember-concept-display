Index: lib/tasks/try-each.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/tasks/try-each.js	(date 1455582190000)
+++ lib/tasks/try-each.js	(revision )
@@ -52,33 +52,53 @@
     return task.ScenarioManager.changeTo(scenario)
       .then(function(scenarioDependencyState) {
         process.env.EMBER_TRY_CURRENT_SCENARIO = scenario.name;
-
+        var command = task._determineCommandFor(scenario);
         var runResults = {
           scenario: scenario.name,
-          dependencyState: scenarioDependencyState
+          dependencyState: scenarioDependencyState,
+          command: command.join(' ')
         };
-        return task._runCommand().then(function(result) {
+
+        return task._runCommand({commandArgs: command, commandOptions: task._commandOptions()}).then(function(result) {
           runResults.result = result;
           return RSVP.resolve(runResults);
         });
       });
   },
 
-  _runCommand: function() {
+  _determineCommandFor: function(scenario) {
     var task = this;
-    return runCommand(task.project.root, this._commandArgs(), this._commandOptions());
+
+    if (task.commandArgs) {
+      return this.commandArgs;
+    }
+
+    if (scenario.command) {
+      return scenario.command.split(' ');
+    }
+
+    if (task.config.command) {
+      return task.config.command.split(' ');
+    }
+
+    return this._defaultCommandArgs();
   },
 
+  _runCommand: function(options) {
+    var task = this;
+    return runCommand(task.project.root, options.commandArgs, options.commandOptions);
+  },
+
   _commandOptions: function() {
     return this.commandOptions;
   },
 
-  _commandArgs: function() {
-    return this.commandArgs || ['test'];
+  _defaultCommandArgs: function() {
+    return ['ember', 'test'];
   },
 
   _printResults: function(results) {
-    new ResultSummary({ui: this.ui, results: results, command: this._commandArgs().join(' ')}).print();
+    new ResultSummary({ui: this.ui, results: results}).print();
   },
 
   _exitAsAppropriate: function(results) {
Index: test/helpers/generate-mock-run.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/helpers/generate-mock-run.js	(revision )
+++ test/helpers/generate-mock-run.js	(revision )
@@ -0,0 +1,40 @@
+module.exports = function generateMockRun(mockedCommand, mockedCommandCallback) {
+  var mockedCommands = [];
+  if (typeof arguments[0] === 'string') {
+    mockedCommands.push({ command: mockedCommand, callback: mockedCommandCallback });
+  } else {
+    mockedCommands = arguments[0];
+  }
+
+  return function mockRun(command, args, opts) {
+    var matchingCmd = mockedCommands.find(function(mockedCmd) {
+      var mockedCommandArgs = mockedCmd.command.split(' ');
+      return mockedCommandIsEmberAndArgumentsMatch(mockedCommandArgs, command, args) || commandIsMocked(mockedCommandArgs, command, args);
+    });
+
+    if (matchingCmd) {
+      return matchingCmd.callback(command, args, opts);
+    } else {
+      var regularRun = require('../../lib/utils/run');
+      return regularRun.apply(this, arguments);
+    }
+  };
+};
+
+function mockedCommandIsEmberAndArgumentsMatch(mockedCommandArgs, command, args) {
+  return (mockedCommandArgs[0] === 'ember') && (command == 'node' && args && (args[0].indexOf('ember') > -1) && arrayContains(args.slice(1)[0], mockedCommandArgs.slice(1)));
+}
+
+function commandIsMocked(mockedCommandArgs, command, args) {
+  return (mockedCommandArgs[0] === command && arrayContains(args, mockedCommandArgs.slice(1)));
+}
+
+function arrayContains(firstArr, secondArr) {
+  var flag = true;
+  secondArr.forEach(function(item, index) {
+    if (firstArr[index] !== item) {
+      flag = false;
+    }
+  });
+  return flag;
+}
Index: lib/utils/run-command.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/run-command.js	(date 1455582190000)
+++ lib/utils/run-command.js	(revision )
@@ -4,13 +4,21 @@
 var run           = require('./run');
 
 module.exports = function(root, commandArgs, opts) {
-  var options;
-  return findEmberPath(root)
-    .then(function(emberPath) {
-      options = extend({cwd: root}, opts);
-      return run('node', [emberPath, commandArgs], options);
-    })
-    .then(function() {
+  var options = extend({cwd: root}, opts);
+  var runPromise;
+  var command = commandArgs[0];
+  var actualArgs = commandArgs.slice(1);
+  console.log('Running command', command);
+  console.log('actual args', actualArgs);
+  if (command === 'ember') {
+    runPromise = findEmberPath(root).then(function(emberPath) {
+      return run('node', [emberPath, actualArgs], options);
+    });
+  } else {
+    runPromise = run(command, actualArgs, options);
+  }
+
+  return runPromise.then(function() {
       return RSVP.resolve(true);
     })
     .catch(function(errorCode) {
Index: lib/commands/try.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/commands/try.js	(date 1455582190000)
+++ lib/commands/try.js	(revision )
@@ -36,7 +36,7 @@
     }
 
     if (subcommandArgs.length === 0) {
-      subcommandArgs.push('test');
+      subcommandArgs = ['ember', 'test'];
     }
 
     return subcommandArgs;
Index: lib/utils/result-summary.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/result-summary.js	(date 1455582190000)
+++ lib/utils/result-summary.js	(revision )
@@ -19,6 +19,7 @@
         countFailed++;
       }
       task.ui.writeLine(colorAndMessage);
+      task.ui.writeLine('Command run: ' + scenario.command);
       task._printDependencyTable(scenario.dependencyState);
     });
 
@@ -29,8 +30,6 @@
     var task = this;
     task.ui.writeLine('');
     task.ui.writeLine('------ RESULTS ------');
-    task.ui.writeLine('');
-    task.ui.writeLine('Running command `' + task.command + '`');
     task.ui.writeLine('');
   },
   _printDependencyTable: function(dependencyStatus) {
Index: lib/utils/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/utils/config.js	(date 1455582190000)
+++ lib/utils/config.js	(revision )
@@ -16,6 +16,7 @@
 
 function defaultConfig() {
   return {
+    command: 'ember test --reporter xunit',
     scenarios: [
       {
         name: 'default',
Index: test/tasks/try-each-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/tasks/try-each-test.js	(date 1455582190000)
+++ test/tasks/try-each-test.js	(revision )
@@ -9,6 +9,7 @@
 
 /* The first two of the tests in this file intentionally DO NOT stub dependency manager adapter*/
 var StubDependencyAdapter = require('../helpers/stub-dependency-manager-adapter');
+var generateMockRun = require('../helpers/generate-mock-run');
 
 var remove = RSVP.denodeify(fs.remove);
 var root = process.cwd();
@@ -121,15 +122,9 @@
     it('succeeds when scenario\'s tests succeed', function() {
       this.timeout(30000);
 
-      var mockedRun = function(_, args) {
-        if (args[1].indexOf('test') > -1) {
+      var mockedRun = generateMockRun('ember test', function() {
-          return RSVP.resolve(0);
+        return RSVP.resolve(0);
-        } else {
-          var regularRun = require('../../lib/utils/run');
-          return regularRun.apply(this, arguments);
-        }
-      };
-
+      });
       mockery.registerMock('./run', mockedRun);
 
       var output = [];
@@ -169,19 +164,14 @@
       this.timeout(30000);
 
       var runTestCount = 0;
-      var mockedRun = function(_, args) {
-        if (args[1].indexOf('test') > -1) {
+      var mockedRun = generateMockRun('ember test', function() {
-          runTestCount++;
-          if (runTestCount == 1) {
-            return RSVP.reject(1);
-          } else {
-            return RSVP.resolve(0);
-          }
+        runTestCount++;
+        if (runTestCount == 1) {
+          return RSVP.reject(1);
+        } else {
+          return RSVP.resolve(0);
+        }
-        } else {
-          var regularRun = require('../../lib/utils/run');
-          return regularRun.apply(this, arguments);
-        }
-      };
+      });
 
       mockery.registerMock('./run', mockedRun);
 
@@ -223,14 +213,9 @@
     it('succeeds when scenario\'s tests succeed', function() {
       this.timeout(300000);
 
-      var mockedRun = function(cmd, args, opts) {
-        if (args && args.length > 1 && args[1].indexOf('test') > -1) {
+      var mockedRun = generateMockRun('ember test', function() {
-          return RSVP.resolve(0);
+        return RSVP.resolve(0);
-        } else {
-          var regularRun = require('../../lib/utils/run');
-          return regularRun.apply(this, arguments);
-        }
-      };
+      });
 
       mockery.registerMock('./run', mockedRun);
 
@@ -270,19 +255,14 @@
       this.timeout(300000);
 
       var runTestCount = 0;
-      var mockedRun = function(_, args) {
-        if (args && args.length > 1 && args[1].indexOf('test') > -1) {
+      var mockedRun = generateMockRun('ember test', function() {
-          runTestCount++;
-          if (runTestCount == 1) {
-            return RSVP.reject(1);
-          } else {
-            return RSVP.resolve(0);
-          }
+        runTestCount++;
+        if (runTestCount == 1) {
+          return RSVP.reject(1);
+        } else {
+          return RSVP.resolve(0);
+        }
-        } else {
-          var regularRun = require('../../lib/utils/run');
-          return regularRun.apply(this, arguments);
-        }
-      };
+      });
 
       mockery.registerMock('./run', mockedRun);
 
@@ -335,17 +315,12 @@
         }]
       };
       var passedInOptions = false;
-      var mockedRun = function(_, args, options) {
-        if (args[1].indexOf('serve') > -1) {
+      var mockedRun = generateMockRun('ember serve', function(command, args, options) {
-          if(options.timeout && options.timeout.length == 20000 && options.timeout.isSuccess) {
+        if (options.timeout && options.timeout.length == 20000 && options.timeout.isSuccess) {
-            passedInOptions = true;
-          }
-          return RSVP.resolve(0);
+          passedInOptions = true;
+        }
+        return RSVP.resolve(0);
-        } else {
-          var regularRun = require('../../lib/utils/run');
-          return regularRun.apply(this, arguments);
-        }
-      };
+      });
 
       mockery.registerMock('./run', mockedRun);
 
@@ -363,7 +338,7 @@
         ui: {writeLine: outputFn},
         project: {root: tmpdir},
         config: config,
-        commandArgs: ['serve'],
+        commandArgs: ['ember', 'serve'],
         commandOptions: { timeout: { length: 20000, isSuccess: true }},
         dependencyManagerAdapters: [new StubDependencyAdapter()],
         _exit: mockedExit
@@ -379,58 +354,121 @@
       });
     });
 
+    describe('configurable command', function() {
-    it('allows passing in of the command to run', function() {
-      // With stubbed dependency manager, timing out is warning for accidentally not using the stub
-      this.timeout(100);
+      it('allows passing in of the command to run', function() {
+        // With stubbed dependency manager, timing out is warning for accidentally not using the stub
+        this.timeout(100);
 
-      var config = {
+        var config = {
+          command: 'ember test-this',
-        scenarios: [{
-          name: 'first',
-          dependencies: {
-            ember: '1.13.0'
-          }
-        }]
-      };
-      var ranPassedInCommand = false;
+          scenarios: [{
+            name: 'first',
+            dependencies: {
+              ember: '1.13.0'
+            }
+          }]
+        };
+        var ranPassedInCommand = false;
-      var mockedRun = function(_, args) {
-        if (args[1].indexOf('serve') > -1) {
+        var mockedRun = generateMockRun('ember serve', function() {
           ranPassedInCommand = true;
           return RSVP.resolve(0);
-        } else {
-          var regularRun = require('../../lib/utils/run');
-          return regularRun.apply(this, arguments);
+        });
+        mockery.registerMock('./run', mockedRun);
+
+        var output = [];
+        var outputFn = function(log) {
+          output.push(log);
+        };
+
+        var mockedExit = function(code) {
+          code.should.equal(0, 'exits 0 when all scenarios succeed');
+        };
+
+        var TryEachTask = require('../../lib/tasks/try-each');
+        var tryEachTask = new TryEachTask({
+          ui: {writeLine: outputFn},
+          project: {root: tmpdir},
+          config: config,
+          commandArgs: ['ember', 'serve'],
+          dependencyManagerAdapters: [new StubDependencyAdapter()],
+          _exit: mockedExit
+        });
+
+        return tryEachTask.run(config.scenarios, {}).then(function() {
+          output.should.containEql('Scenario first: SUCCESS');
+          ranPassedInCommand.should.equal(true, 'Should run the passed in command');
+        }).catch(function(err) {
+          console.log(err);
+          true.should.equal(false, 'Assertions should run');
+        });
+      });
+      it('uses command from config', function() {
+        // With stubbed dependency manager, timing out is warning for accidentally not using the stub
+        this.timeout(100);
+
+        var config = {
+          command: 'ember test --test-port=2345',
+          scenarios: [{
+            name: 'first',
+            dependencies: {
+              ember: '1.13.0'
-        }
+            }
+          },{
+            name: 'different',
+            command: 'npm run-script different',
+            dependencies: {
+              ember: '2.0.0'
+            }
+          }]
-      };
+        };
 
+        var ranDefaultCommand = false;
+        var ranScenarioCommand = false;
+        var mockedRun = generateMockRun([{
+          command: 'ember test --test-port=2345',
+          callback: function() {
+            ranDefaultCommand = true;
+            return RSVP.resolve(0);
+          }
+        },{
+          command: 'npm run-script different',
+          callback: function() {
+            ranScenarioCommand = true;
+            return RSVP.resolve(0);
+          }
+        }]);
-      mockery.registerMock('./run', mockedRun);
+        mockery.registerMock('./run', mockedRun);
 
-      var output = [];
-      var outputFn = function(log) {
-        output.push(log);
-      };
+        var output = [];
+        var outputFn = function(log) {
+          output.push(log);
+        };
 
-      var mockedExit = function(code) {
-        code.should.equal(0, 'exits 0 when all scenarios succeed');
-      };
+        var mockedExit = function(code) {
+          code.should.equal(0, 'exits 0 when all scenarios succeed');
+        };
 
-      var TryEachTask = require('../../lib/tasks/try-each');
-      var tryEachTask = new TryEachTask({
-        ui: {writeLine: outputFn},
-        project: {root: tmpdir},
-        config: config,
+        var TryEachTask = require('../../lib/tasks/try-each');
+        var tryEachTask = new TryEachTask({
+          ui: {writeLine: outputFn},
+          project: {root: tmpdir},
+          config: config,
-        commandArgs: ['serve'],
-        dependencyManagerAdapters: [new StubDependencyAdapter()],
-        _exit: mockedExit
-      });
+          dependencyManagerAdapters: [new StubDependencyAdapter()],
+          _exit: mockedExit
+        });
 
-      writeJSONFile('bower.json', fixtureBower);
-      return tryEachTask.run(config.scenarios, {}).then(function() {
-        output.should.containEql('Scenario first: SUCCESS');
+        return tryEachTask.run(config.scenarios, {}).then(function() {
+          output.should.containEql('Scenario first: SUCCESS');
-        ranPassedInCommand.should.equal(true, 'Should run the passed in command');
+          output.should.containEql('Scenario different: SUCCESS');
+
+          ranDefaultCommand.should.equal(true, 'Should run the default command for one scenario');
+          ranScenarioCommand.should.equal(true, 'Should run the scenario command for one scenario');
-      }).catch(function(err) {
-        console.log(err);
-        true.should.equal(false, 'Assertions should run');
-      });
+        }).catch(function(err) {
+          console.log(err);
+          true.should.equal(false, 'Assertions should run');
+        });
+      });
+
     });
 
     it('sets EMBER_TRY_CURRENT_SCENARIO', function() {
